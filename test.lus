const
-- Boiler characteristics
  N_pump = 4;
  C = 30;    -- Maximal capacity
  M1 = 8;   -- Minimal limit
  M2 = 28;   -- Maximal limit
  N1 = 10;   -- Minimal normal
  N2 = 25;   -- Maximal normal
  P = 5;     -- Capacité nominal de chaque pompe
-- Mode :
  Initialization = 0;
  Normal = 1;
  Degraded = 2;
  Rescue = 3;
  Emergency_stop = 4;


------------------------Boiler Controller Node-----------------
-- a changer failure : (0=Pump;1=PumpController;2=Water_level;3=mesure_pression_steam;4=Transmission)

node test(
		steam_boiler_waiting : bool;
		level:int;
		steam:int;
		valve_status:int;
		physical_units_ready:bool;
		pump_state:int^N_pump;
		pump_control_state:bool^N_pump;
		Failures : bool^5)
	returns (mode:int;
		valve:bool;
		program_ready:bool;
		open_pump:bool^N_pump;
		close_pump:bool^N_pump);

var q_estime : int;

let

-- Transitions --
mode = Initialization -> if (steam_boiler_waiting and pre(mode)=Initialization) and (Failures[2] or steam<>0) then Emergency_stop
                         else if (steam_boiler_waiting and pre(mode)=Initialization) and (level>N1 and level<N2 and physical_units_ready) then Normal
                              else if (pre(mode)=Normal) and ((level>M2 or level<M1) or (Failures[4])) then Emergency_stop
                                  else if (pre(mode)=Normal and Failures[2]) then Rescue
				     else if (pre(Mode)=Rescue) then Normal
                                         else if (pre(mode)=Normal) and (Failures[0] or Failures[1] or Failures[3]) then Degraded
                                            else (Initialization->pre(mode));

-- gestion des pompes --
open_pump[0..(N_pump-1)] = false^N_pump -> if (mode=Initialization and steam_boiler_waiting) and (level<N1 and pumpOFF( N_pump, pump_state)) then true^N_pump
					   else if (mode=Normal) and (level<N1 and pumpOFF( N_pump, pump_state)) then true^N_pump
					   else if (mode=Degraded) and (level<N1 and pumpOFF( N_pump, pump_state)) then true^N_pump
					   else if (mode=Rescue) and (Failures[3]=false) and (Failures[1]=false) and q_estime<N1 and pumpOFF( N_pump, pump_state) then true^N_pump
                                           else false^N_pump;
close_pump[0..(N_pump-1)] = false^N_pump -> if (mode=Emergency_stop) then true_pump
					    else if (mode=Initialization and steam_boiler_waiting) and level>N1 and not(pumpOFF( N_pump, pump_state)) then true^N_pump
					    else if (mode=Normal) and level>N2 and not(pumpOFF( N_pump, pump_state)) then true^N_pump
                                            else if (mode=Degraded) and level>N2 and not(pumpOFF( N_pump, pump_state)) then true^N_pump
					    else if (mode=Rescue) and (Failures[3]=false) and (Failures[1]=false) and q_estime>N2 and not(pumpOFF( N_pump, pump_state)) then true^N_pump
                                            else false^N_pump;
program_ready = false -> if (mode=Initialization) and (level>N1 and level<N2) then true
                          else false;

-- gestion de la valve --
-- Entrée valve_status : valve fermé quand supérieur à 0 et valve ouverte quand inférieur à 0
valve = false -> if mode=Emergency_stop then true
		 else if mode=Initialization and level>N2 and valve_status>0 then true
		 else false;

--estimation quantité d'eau
q_estime = 0 -> if (Failures[2]) and pre(q_estime)=0 then pre(level)
		else if Failures[2] and pumpOFF( N_pump, pump_state) then pre(q_estime)-steam
		else if Failures[2] and not(pumpOFF( N_pump, pump_state)) then pre(q_estime)+4*P-steam
		else 0;
tel

-- fonction recursive --
-- result = true si toutes les pompe sont off
node pumpOFF(const n : int; pump: int^n) returns (result: bool);
let
  result = with n=1 then pump[0]=0
          else (pump[0]=0 and pumpOFF(n-1, pump[1..n-1]));
tel

--ASSERTIONS
 

--UMS CALL

--PROPERTIES

